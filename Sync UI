// iOS26GlassUILib.js - Pure UI Library (No Game Logic)
class iOS26GlassUI {
  /**
   * Initialize the UI library
   * @param {Object} config - Customize UI (title, position, colors)
   * @example const ui = new iOS26GlassUI({ title: "My Tool" });
   */
  constructor(config = {}) {
    // Default UI config (creators can override)
    this.settings = {
      title: "iOS 26 UI",
      openBtn: { bottom: "25px", right: "25px" }, // Floating button position
      uiSize: { width: "360px", maxWidth: "92vw" },
      colors: {
        toggleActive: "#34c759", // iOS green
        textMain: "#1d1d1f",
        textSub: "#86868b",
        glass: "rgba(255,255,255,0.18)"
      },
      ...config
    };

    // Track UI elements
    this.container = null;
    this.openBtn = null;
    this.contentArea = null;
    this.tabs = new Map(); // Store tabs: { id: { element, content } }
    this.components = new Map(); // Store toggles/sliders: { id: state }

    // Load core styles + base UI
    this.#injectStyles();
    this.#buildBaseUI();
  }

  // —— Private: Inject iOS 26 Glass Styles (No Creator Edits Needed) ——
  #injectStyles() {
    const style = document.createElement("style");
    style.id = "ios26-lib-styles";
    style.textContent = `
      /* Floating Open Button */
      .ios26-lib-open {
        position: fixed;
        ${this.settings.openBtn.bottom}
        ${this.settings.openBtn.right}
        z-index: 99999;
        width: 58px;
        height: 58px;
        border-radius: 50%;
        background: rgba(255,255,255,0.9);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        border: 1px solid rgba(255,255,255,0.2);
        box-shadow: 0 6px 18px rgba(0,0,0,0.1);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .ios26-lib-open svg { width: 30px; height: 30px; fill: ${this.settings.colors.textMain}; }

      /* Main UI Container */
      .ios26-lib-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 99998;
        ${this.settings.uiSize.width}
        ${this.settings.uiSize.maxWidth}
        min-height: 500px;
        background: ${this.settings.colors.glass};
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border-radius: 28px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        overflow: hidden;
        display: none;
      }

      /* Header */
      .ios26-lib-header {
        padding: 20px 22px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid rgba(255,255,255,0.15);
        background: rgba(255,255,255,0.2);
      }
      .ios26-lib-header h2 {
        font-size: 21px;
        font-weight: 600;
        color: ${this.settings.colors.textMain};
      }
      .ios26-lib-close {
        width: 38px;
        height: 38px;
        border-radius: 50%;
        background: rgba(255,255,255,0.15);
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .ios26-lib-close svg { width: 22px; height: 22px; fill: ${this.settings.colors.textMain}; }

      /* Tabs Bar */
      .ios26-lib-tabs {
        display: flex;
        justify-content: space-around;
        padding: 12px 0;
        border-top: 1px solid rgba(255,255,255,0.15);
        background: rgba(255,255,255,0.2);
      }
      .ios26-lib-tab {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
        background: transparent;
        border: none;
        color: ${this.settings.colors.textSub};
        cursor: pointer;
        font-size: 10px;
        font-weight: 500;
      }
      .ios26-lib-tab.active { color: ${this.settings.colors.textMain}; }
      .ios26-lib-tab svg { width: 24px; height: 24px; fill: currentColor; }

      /* Content Area */
      .ios26-lib-content {
        height: calc(100% - 124px);
        overflow-y: auto;
        padding: 16px;
      }

      /* Toggle Component */
      .ios26-lib-toggle {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 14px 0;
        border-bottom: 1px solid rgba(255,255,255,0.1);
      }
      .ios26-lib-toggle-label {
        display: flex;
        flex-direction: column;
        gap: 2px;
      }
      .ios26-lib-toggle-main { font-size: 16px; color: ${this.settings.colors.textMain}; }
      .ios26-lib-toggle-sub { font-size: 12px; color: ${this.settings.colors.textSub}; }
      .ios26-lib-toggle-switch {
        position: relative;
        width: 52px;
        height: 32px;
        border-radius: 16px;
        background: rgba(255,255,255,0.15);
        cursor: pointer;
        transition: background 0.2s ease;
      }
      .ios26-lib-toggle-switch.active { background: ${this.settings.colors.toggleActive}; }
      .ios26-lib-toggle-dot {
        position: absolute;
        top: 2px;
        left: 2px;
        width: 28px;
        height: 28px;
        border-radius: 50%;
        background: white;
        transition: left 0.2s ease;
      }
      .ios26-lib-toggle-switch.active .ios26-lib-toggle-dot { left: 22px; }

      /* Slider Component */
      .ios26-lib-slider {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 14px 0;
        border-bottom: 1px solid rgba(255,255,255,0.1);
      }
      .ios26-lib-slider-label {
        display: flex;
        flex-direction: column;
        gap: 2px;
      }
      .ios26-lib-slider-main { font-size: 16px; color: ${this.settings.colors.textMain}; }
      .ios26-lib-slider-sub { font-size: 12px; color: ${this.settings.colors.textSub}; }
      .ios26-lib-slider-input {
        width: 120px;
        height: 4px;
        background: rgba(255,255,255,0.15);
        border-radius: 2px;
        -webkit-appearance: none;
        outline: none;
      }
      .ios26-lib-slider-input::-webkit-slider-thumb {
        -webkit-appearance: none;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        background: white;
        cursor: pointer;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }

      /* Button Component */
      .ios26-lib-btn {
        background: rgba(255,255,255,0.15);
        color: ${this.settings.colors.textMain};
        border: none;
        border-radius: 12px;
        padding: 8px 16px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s ease;
        margin-top: 8px;
      }
      .ios26-lib-btn:hover { background: rgba(255,255,255,0.25); }
    `;
    document.head.appendChild(style);
  }

  // —— Private: Build Base UI (Container + Open/Close Buttons) ——
  #buildBaseUI() {
    // 1. Floating Open Button
    this.openBtn = document.createElement("div");
    this.openBtn.className = "ios26-lib-open";
    this.openBtn.innerHTML = `
      <svg viewBox="0 0 24 24">
        <path d="M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h18v14z"/>
      </svg>
    `;
    document.body.appendChild(this.openBtn);

    // 2. Main UI Container
    this.container = document.createElement("div");
    this.container.className = "ios26-lib-container";
    this.container.innerHTML = `
      <div class="ios26-lib-header">
        <h2>${this.settings.title}</h2>
        <button class="ios26-lib-close">
          <svg viewBox="0 0 24 24">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
          </svg>
        </button>
      </div>
      <div class="ios26-lib-content"></div>
      <div class="ios26-lib-tabs"></div>
    `;
    document.body.appendChild(this.container);

    // 3. Get Content/Tabs Areas
    this.contentArea = this.container.querySelector(".ios26-lib-content");
    this.tabsBar = this.container.querySelector(".ios26-lib-tabs");

    // 4. Toggle UI Visibility
    this.openBtn.addEventListener("click", () => {
      this.container.style.display = this.container.style.display === "block" ? "none" : "block";
    });
    this.container.querySelector(".ios26-lib-close").addEventListener("click", () => {
      this.container.style.display = "none";
    });
  }

  // —— Public: Add Tab (Creator Calls This) ——
  /**
   * Add a new tab
   * @param {string} tabId - Unique ID for the tab
   * @param {string} tabName - Display name of the tab
   * @param {string} iconSvg - SVG icon (use 24x24 size)
   * @example ui.addTab("combat", "Combat", "<svg>...</svg>");
   */
  addTab(tabId, tabName, iconSvg) {
    if (this.tabs.has(tabId)) return console.warn(`Tab "${tabId}" already exists`);

    // Create tab button
    const tabBtn = document.createElement("button");
    tabBtn.className = "ios26-lib-tab";
    tabBtn.innerHTML = `${iconSvg}<span>${tabName}</span>`;
    this.tabsBar.appendChild(tabBtn);

    // Create tab content (empty initially)
    const tabContent = document.createElement("div");
    tabContent.id = `ios26-tab-${tabId}`;
    tabContent.className = "ios26-lib-tab-content";
    tabContent.style.display = this.tabs.size === 0 ? "block" : "none"; // Show first tab
    this.contentArea.appendChild(tabContent);

    // Activate tab on click
    tabBtn.addEventListener("click", () => {
      // Hide all tabs
      this.tabs.forEach(({ btn, content }) => {
        btn.classList.remove("active");
        content.style.display = "none";
      });
      // Show current tab
      tabBtn.classList.add("active");
      tabContent.style.display = "block";
    });

    // Save tab to map
    this.tabs.set(tabId, { btn: tabBtn, content: tabContent });

    // Activate first tab by default
    if (this.tabs.size === 1) tabBtn.classList.add("active");
  }

  // —— Public: Add Toggle (Creator Calls This) ——
  /**
   * Add a toggle switch to a tab
   * @param {string} tabId - Tab ID to add the toggle
   * @param {string} toggleId - Unique ID for the toggle
   * @param {string} mainText - Main label text
   * @param {string} subText - Sub label text (optional)
   * @param {function} onToggle - Callback when toggle changes
   * @example ui.addToggle("combat", "killaura", "KillAura", "Auto-target", (isActive) => {});
   */
  addToggle(tabId, toggleId, mainText, subText = "", onToggle) {
    const tab = this.tabs.get(tabId);
    if (!tab) return console.error(`Tab "${tabId}" not found`);
    if (this.components.has(toggleId)) return console.warn(`Toggle "${toggleId}" already exists`);

    // Create toggle element
    const toggle = document.createElement("div");
    toggle.className = "ios26-lib-toggle";
    toggle.innerHTML = `
      <div class="ios26-lib-toggle-label">
        <div class="ios26-lib-toggle-main">${mainText}</div>
        ${subText ? `<div class="ios26-lib-toggle-sub">${subText}</div>` : ""}
      </div>
      <div class="ios26-lib-toggle-switch" id="ios26-toggle-${toggleId}">
        <div class="ios26-lib-toggle-dot"></div>
      </div>
    `;
    tab.content.appendChild(toggle);

    // Track toggle state
    this.components.set(toggleId, false);

    // Add click event
    const toggleSwitch = toggle.querySelector(".ios26-lib-toggle-switch");
    toggleSwitch.addEventListener("click", () => {
      const isActive = toggleSwitch.classList.toggle("active");
      this.components.set(toggleId, isActive);
      if (typeof onToggle === "function") onToggle(isActive);
    });
  }

  // —— Public: Add Slider (Creator Calls This) ——
  /**
   * Add a slider to a tab
   * @param {string} tabId - Tab ID to add the slider
   * @param {string} sliderId - Unique ID for the slider
   * @param {string} mainText - Main label text
   * @param {string} subText - Sub label text (optional)
   * @param {Object} sliderOpts - Min/max/step/initial value
   * @param {function} onInput - Callback when slider changes
   * @example ui.addSlider("combat", "range", "Range", "1-10 blocks", { min:1, max:10, value:5 }, (val) => {});
   */
  addSlider(tabId, sliderId, mainText, subText = "", sliderOpts = {}, onInput) {
    const tab = this.tabs.get(tabId);
    if (!tab) return console.error(`Tab "${tabId}" not found`);
    if (this.components.has(sliderId)) return console.warn(`Slider "${sliderId}" already exists`);

    const { min = 1, max = 10, step = 1, value = 5 } = sliderOpts;

    // Create slider element
    const slider = document.createElement("div");
    slider.className = "ios26-lib-slider";
    slider.innerHTML = `
      <div class="ios26-lib-slider-label">
        <div class="ios26-lib-slider-main">${mainText}</div>
        ${subText ? `<div class="ios26-lib-slider-sub">${subText}</div>` : ""}
      </div>
      <input type="range" class="ios26-lib-slider-input" id="ios26-slider-${sliderId}"
        min="${min}" max="${max}" step="${step}" value="${value}">
    `;
    tab.content.appendChild(slider);

    // Track slider value
    this.components.set(sliderId, value);

    // Add input event
    const sliderInput = slider.querySelector(".ios26-lib-slider-input");
    sliderInput.addEventListener("input", () => {
      const val = sliderInput.value;
      this.components.set(sliderId, val);
      if (typeof onInput === "function") onInput(val);
    });
  }

  // —— Public: Add Button (Creator Calls This) ——
  /**
   * Add a button to a tab
   * @param {string} tabId - Tab ID to add the button
   * @param {string} btnText - Button text
   * @param {function} onClick - Callback when button is clicked
   * @example ui.addButton("settings", "Reset", () => {});
   */
  addButton(tabId, btnText, onClick) {
    const tab = this.tabs.get(tabId);
    if (!tab) return console.error(`Tab "${tabId}" not found`);

    const btn = document.createElement("button");
    btn.className = "ios26-lib-btn";
    btn.textContent = btnText;
    tab.content.appendChild(btn);

    btn.addEventListener("click", onClick);
  }

  // —— Public: Get Component State (Creator Calls This) ——
  /**
   * Get current state of a toggle/slider
   * @param {string} componentId - Toggle/slider ID
   * @returns {boolean|string} Toggle state (true/false) or slider value
   * @example const isKillauraOn = ui.getComponentState("killaura");
   */
  getComponentState(componentId) {
    if (!this.components.has(componentId)) {
      console.error(`Component "${componentId}" not found`);
      return null;
    }
    return this.components.get(componentId);
  }
}

// Make library global (so creators can access it)
window.iOS26GlassUI = iOS26GlassUI;
